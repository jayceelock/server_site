from django.http import HttpResponse
from django.contrib.auth.decorators import login_required
from display_qrcode.models import ProductData

from Crypto.PublicKey import RSA 
from Crypto.Hash import MD5

from ezPyCrypto import key

#from PyQRNative import *
import qrcode

import base64
import random

@login_required
def image(request):
    try:
        input_product_code = str(request.session['session_code'])    
    except:
        return HttpResponse("Please scan a valid QR code.")
    
    request.session.set_expiry(1)    
    
    server_priv_key = key()
    vending_pub_key = key()
    
    key_file = open("server_key_ez.priv", "rb")
    server_priv_key_f = key_file.read()
    key_file.close()
    
    key_file = open("vending_key_ez.pub", "rb")
    vending_pub_key_f = key_file.read()
    key_file.close()
    
    server_priv_key.importKey(server_priv_key_f)
    vending_pub_key.importKey(vending_pub_key_f)
    
    try:
        #import pdb;pdb.set_trace()
        input_data = input_product_code.split('[]', 2)
    
        data_block_1 = input_data[0]
        data_block_2 = input_data[1]
        
        decoded_data_block_1 = base64.urlsafe_b64decode(data_block_1)
        #data_block_1 = data_block_1.strip('<StartPycryptoMessage>')
        #data_block_1 = data_block_1.strip('<EndPycryptoMessage>')
        #data_block_1 = '<StartPycryptoMessage>\n' + data_block_1 + '\n<EndPycryptoMessage>'
        
        #data_block_2 = data_block_2.strip('<StartPycryptoSignature>')
        #data_block_2 = data_block_2.strip('<EndPycryptoSignature>')
        #data_block_2 = '<StartPycryptoSignature>' + data_block_2 + '<EndPycryptoSignature>'
        #import pdb; pdb.set_trace()
        decrypted_data = server_priv_key.decString(decoded_data_block_1)
        verify_test = vending_pub_key.verifyString(decrypted_data, data_block_2)
        
        challenge = decrypted_data[4:8]                 #take challenge code from char 4 to char 8
        product_code = decrypted_data[-4:].upper()      #product code = last 4 chars of string
        
    except:
        return HttpResponse('This code has an invalid format. Please rescan the QR Code.')
    
    if verify_test != True:
        return HttpResponse('The origin of this QR Code could not be verified. Please contact your administrator')
    
    try:
        profile = request.user.get_profile()
    except:
        return HttpResponse("Profile does not exist yet")

    try:                            #get details of current user
        product = ProductData.objects.get(product_code = product_code)
    except:
        return HttpResponse("Invalid product code")
    
    user_balance = profile.balance
    price = product.product_price

    if  user_balance > price:
        user_balance = user_balance - price
        profile.balance = user_balance
        profile.save()
        
        rand_hex_block_1 = '%004x' % random.randrange(16**4)
        rand_hex_block_2 = '%008x' % random.randrange(16**8)
        
        confirm_code_string = rand_hex_block_1 + challenge + rand_hex_block_2           #take challenge code as purchase authentication and insert it into char position 4
        
        encrypted_response_code = vending_pub_key.encString(confirm_code_string)
        
        response_signature = server_priv_key.signString(confirm_code_string)
        
        # encrypted_response_code = encrypted_response_code.strip('<StartPycryptoMessage>\n')
        # encrypted_response_code = encrypted_response_code.strip('\n<EndPycryptoMessage>')
        encoded_response_code = base64.b64encode(encrypted_response_code)
        
        #response_signature = response_signature.strip('<StartPycryptoSignature>\n')
        #response_signature = response_signature.strip('\n<EndPycryptoSignature>')
        #import pdb;pdb.set_trace()
        total_response = encoded_response_code + '[]' + response_signature
        
        qr = qrcode.QRCode(
                           version = None,
                           box_size = 7,
                           )
     
        qr.add_data(total_response)
        qr.make(fit = True)
     
        im = qr.make_image()
         
        response = HttpResponse(mimetype="image/png")
        im.save(response, "PNG")
        return response

    else:
        return HttpResponse("Not enough credits. Please load some more and scan the QR Code again.")
